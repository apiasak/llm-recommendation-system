import streamlit as st
from openai import OpenAI
import json
import os
from dotenv import load_dotenv
import logging
from datetime import datetime
import pandas as pd
import traceback
import sys
from pydantic import BaseModel
from typing import List, Optional, Dict

# üîß Models Definition
class ProductRecommendation(BaseModel):
    category: str
    reason: str
    confidence: float

class RecommendationResponse(BaseModel):
    recommendations: List[ProductRecommendation]

class ProductDisplay(BaseModel):
    category: str
    product: str
    price: float
    reason: str
    confidence: float
    image: str

# üì¶ Product Catalog
PRODUCT_CATALOG = {
    "Sports & Fitness": [
        {"id": "S001", "name": "Nike Air Zoom Pegasus", "price": 4500, "description": "‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏ß‡∏¥‡πà‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°", "image": "https://picsum.photos/300/200?random=1"},
        {"id": "S002", "name": "Fitbit Charge 5", "price": 6900, "description": "‡∏™‡∏°‡∏≤‡∏£‡πå‡∏ó‡∏ß‡∏≠‡∏ó‡∏ä‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢", "image": "https://picsum.photos/300/200?random=2"},
        {"id": "S003", "name": "Yoga Mat Premium", "price": 1200, "description": "‡πÄ‡∏™‡∏∑‡πà‡∏≠‡πÇ‡∏¢‡∏Ñ‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á", "image": "https://picsum.photos/300/200?random=3"}
    ],
    "Photography": [
        {"id": "P001", "name": "Sony A7 III", "price": 59900, "description": "‡∏Å‡∏•‡πâ‡∏≠‡∏á Mirrorless ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û", "image": "https://picsum.photos/300/200?random=4"},
        {"id": "P002", "name": "DJI Mini 3 Pro", "price": 29900, "description": "‡πÇ‡∏î‡∏£‡∏ô‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏Å‡∏û‡∏≤", "image": "https://picsum.photos/300/200?random=5"},
        {"id": "P003", "name": "Peak Design Backpack", "price": 8900, "description": "‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°", "image": "https://picsum.photos/300/200?random=6"}
    ],
    "Cooking": [
        {"id": "C001", "name": "Instant Pot Duo", "price": 3900, "description": "‡∏´‡∏°‡πâ‡∏≠‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡πÄ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå", "image": "https://picsum.photos/300/200?random=7"},
        {"id": "C002", "name": "Vitamix Blender", "price": 15900, "description": "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏±‡πà‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û", "image": "https://picsum.photos/300/200?random=8"},
        {"id": "C003", "name": "Kitchen Scale Digital", "price": 890, "description": "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏á‡∏î‡∏¥‡∏à‡∏¥‡∏ï‡∏≠‡∏•‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á", "image": "https://picsum.photos/300/200?random=9"}
    ]
}

# üîß Setup Logging with Detail
def setup_logging():
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö logging ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
    if not os.path.exists('logs'):
        os.makedirs('logs')
    
    log_filename = f"logs/recommender_{datetime.now().strftime('%Y%m%d')}.log"
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s',
        handlers=[
            logging.FileHandler(log_filename, encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    logger = logging.getLogger(__name__)
    logger.info("="*50)
    logger.info("üöÄ Starting AI Product Recommender")
    logger.info(f"üìù Log file: {log_filename}")
    logger.info("="*50)
    
    return logger

# üîê API Key Validation
def validate_api_key(api_key: str) -> bool:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á API key"""
    logger.info("üîç Validating API key format")
    if not api_key.startswith('sk-'):
        logger.warning("‚ùå API key validation failed: Doesn't start with 'sk-'")
        return False
    if len(api_key) < 20:
        logger.warning("‚ùå API key validation failed: Length too short")
        return False
    logger.info("‚úÖ API key format validation passed")
    return True

# üîê OpenAI Client
def init_openai_client():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö OpenAI API"""
    try:
        api_key = st.session_state.get('openai_api_key', '')
        if not api_key:
            logger.warning("‚ùå No API key found in session state")
            return None
            
        logger.info("üîÑ Initializing OpenAI client")
        client = OpenAI(api_key=api_key)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        logger.info("üîÑ Testing API connection")
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": "Test connection"}],
            max_tokens=5
        )
        
        if response:
            logger.info("‚úÖ API connection test successful")
            return client
            
    except Exception as e:
        error_details = traceback.format_exc()
        logger.error(f"‚ùå Error initializing OpenAI client:\n{error_details}")
        st.sidebar.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        return None

def get_recommendations_with_products(interest: str, client) -> List[ProductDisplay]:
    """‡∏Ç‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Structured Output"""
    try:
        logger.info(f"üîÑ Getting recommendations for interest: {interest}")
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": """You are an AI assistant functioning as a recommendation system for an ecommerce website. Be specific and limit your answers to the requested format. Keep your answers short and concise.
                    Your Task: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° 
                    ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ: Sports & Fitness, Photography, Cooking
                    
                    ‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
                    {
                        "recommendations": [
                            {
                                "category": "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î",
                                "reason": "‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥",
                                "confidence": 0.8
                            }
                        ]
                    }"""
                },
                {
                    "role": "user",
                    "content": f"‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏ô‡πÉ‡∏à: {interest}"
                }
            ],
            response_format={"type": "json_object"}
        )
        
        result = json.loads(response.choices[0].message.content)
        logger.info(f"‚úÖ Received recommendations: {result}")
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏£‡∏¥‡∏á
        all_product_recommendations = []
        for rec in result["recommendations"]:
            if rec["category"] in PRODUCT_CATALOG:
                # Get all products from the category
                products = PRODUCT_CATALOG[rec["category"]]
                for p in products:
                    product_display = ProductDisplay(
                        category=rec["category"],
                        product=p["name"],
                        price=p["price"],
                        reason=f"{rec['reason']} - {p['description']}",
                        confidence=rec["confidence"],
                        image=p["image"]
                    )
                    all_product_recommendations.append(product_display)
        
        # Sort all products by confidence (high to low)
        all_product_recommendations.sort(key=lambda x: x.confidence, reverse=True)
        
        logger.info(f"‚úÖ Generated {len(all_product_recommendations)} product recommendations")
        return all_product_recommendations
        
    except Exception as e:
        error_details = traceback.format_exc()
        logger.error(f"‚ùå Error in recommendation generation:\n{error_details}")
        return None

def render_product_cards(products: List[ProductDisplay]):
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö card"""
    st.markdown("""
    <style>
    .product-card {
        background-color: var(--st-card-background);
        border-radius: 15px;
        padding: 20px;
        margin: 15px 0;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        border: 1px solid rgba(128, 128, 128, 0.1);
    }
    
    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
    }
    
    .product-title {
        color: var(--st-text);
        font-size: 1.2rem;
        font-weight: 600;
        margin: 10px 0;
    }
    
    .price-tag {
        background-color: #ff4b4b;
        color: white;
        padding: 8px 15px;
        border-radius: 25px;
        font-weight: 600;
        display: inline-block;
    }
    
    .confidence-badge {
        background-color: #4CAF50;
        color: white;
        padding: 5px 12px;
        border-radius: 20px;
        font-size: 0.85rem;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
    cols = st.columns(3)
    for idx, item in enumerate(products):
        with cols[idx % 3]:
            confidence_percent = int(item.confidence * 100)
            st.markdown(f"""
            <div class="product-card">
                <div style="width:100%; height:200px; background-color:rgba(128,128,128,0.1); border-radius:10px; margin-bottom:15px;">
                    <img src="{item.image}" style="width:100%; height:100%; object-fit:cover; border-radius:10px;" alt="{item.product}">
                </div>
                <div class="product-title">{item.product}</div>
                <div style="color: #666; font-size: 0.9rem; margin: 5px 0;">üìÇ {item.category}</div>
                <div style="display:flex; justify-content:space-between; align-items:center; margin:15px 0;">
                    <span class="price-tag">‡∏ø{item.price:,}</span>
                    <span class="confidence-badge">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° {confidence_percent}%</span>
                </div>
                <p style="margin:10px 0;">{item.reason}</p>
                <div style="display:flex; gap:10px; margin-top:20px;">
                    <button style="background-color:#4CAF50; color:white; border:none; padding:8px 15px; border-radius:5px; cursor:pointer; width:100%;">
                        üõí ‡πÉ‡∏™‡πà‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
                    </button>
                    <button style="background-color:#2196F3; color:white; border:none; padding:8px 15px; border-radius:5px; cursor:pointer;">
                        ‚ù§Ô∏è
                    </button>
                </div>
            </div>
            """, unsafe_allow_html=True)

def main():
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô logging
    global logger
    logger = setup_logging()
    
    st.title("üõçÔ∏è AI Product Recommender")
    
    # API Key Management
    st.sidebar.title("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö")
    
    with st.sidebar.expander("üîê API Settings", expanded=True):
        api_key = st.text_input(
            "OpenAI API Key",
            type="password",
            value=st.session_state.get('openai_api_key', ''),
            help="‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö API key ‡∏à‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 'sk-'"
        )
        
        col1, col2 = st.columns([1,1])
        with col1:
            if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å API Key", use_container_width=True):
                if not api_key:
                    logger.warning("‚ö†Ô∏è Empty API key submitted")
                    st.sidebar.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà API key")
                elif not validate_api_key(api_key):
                    logger.warning("‚ö†Ô∏è Invalid API key format")
                    st.sidebar.error("‚ö†Ô∏è ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö API key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                else:
                    st.session_state['openai_api_key'] = api_key
                    client = init_openai_client()
                    if client:
                        logger.info("‚úÖ API key saved and connection tested successfully")
                        st.session_state['client'] = client
                        st.sidebar.success("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                        st.rerun()
        
        with col2:
            if st.button("üóëÔ∏è ‡∏•‡∏ö API Key", use_container_width=True):
                logger.info("üóëÔ∏è Clearing API key from session state")
                st.session_state.pop('openai_api_key', None)
                st.session_state.pop('client', None)
                st.rerun()

    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    if 'client' in st.session_state:
        st.sidebar.success("üü¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß")
    else:
        st.sidebar.error("üî¥ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")

    # Categories
    st.sidebar.title("üè∑Ô∏è ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
    for category in PRODUCT_CATALOG.keys():
        st.sidebar.write(f"‚Ä¢ {category}")

# Debug Mode
    if st.sidebar.checkbox("üîç Debug Mode"):
        st.sidebar.write("üìã Latest Logs:")
        try:
            with open(f"logs/recommender_{datetime.now().strftime('%Y%m%d')}.log", 'r', encoding='utf-8') as f:
                logs = f.readlines()[-10:]  # ‡πÅ‡∏™‡∏î‡∏á 10 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                st.sidebar.code(''.join(logs))
        except FileNotFoundError:
            st.sidebar.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ logs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")

    # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    if 'client' not in st.session_state:
        st.warning("üîë ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà OpenAI API Key ‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        st.info("""
        üí° **‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö API Key:**
        1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà https://platform.openai.com/account/api-keys
        2. Log in ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á account
        3. ‡∏Ñ‡∏•‡∏¥‡∏Å "Create new secret key"
        4. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å API key ‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
        
        ‚ö†Ô∏è **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:**
        - API key ‡∏à‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 'sk-'
        - ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà OpenAI ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà https://platform.openai.com/usage
        """)
        st.stop()

    # Main Interface
    interest = st.text_area(
        "ü§î ‡∏ö‡∏≠‡∏Å‡πÄ‡∏£‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
        placeholder="‡πÄ‡∏ä‡πà‡∏ô: ‡∏â‡∏±‡∏ô‡∏ä‡∏≠‡∏ö‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏ß‡∏¥‡∏ß‡∏ó‡∏¥‡∏ß‡∏ó‡∏±‡∏®‡∏ô‡πå‡∏ï‡∏≠‡∏ô‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß",
        key="interest_input"
    )

    # Tips and Examples
    with st.expander("üí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à"):
        st.markdown("""
        ‡∏¢‡∏¥‡πà‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏°‡∏≤‡∏Å ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏¥‡πà‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏á‡πÉ‡∏à! ‡∏•‡∏≠‡∏á‡∏ö‡∏≠‡∏Å‡πÄ‡∏£‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö:
        - ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡∏ó‡∏≥
        - ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏ô‡∏ä‡∏≠‡∏ö
        - ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        - ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
        
        **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:**
        ```
        ‡∏â‡∏±‡∏ô‡∏ä‡∏≠‡∏ö‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ß‡∏¥‡∏ß‡∏ó‡∏¥‡∏ß‡∏ó‡∏±‡∏®‡∏ô‡πå ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏û‡∏£‡∏∞‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏Å 
        ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≠‡∏á‡∏´‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏†‡∏≤‡∏û‡∏™‡∏ß‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
        ```
        """)

    if st.button("üéØ ‡∏Ç‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", use_container_width=True):
        if interest:
            with st.spinner("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì..."):
                products = get_recommendations_with_products(
                    interest, 
                    st.session_state['client']
                )
                
                if products:
                    render_product_cards(products)
                else:
                    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                    if st.checkbox("üîç ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î error"):
                        try:
                            with open(f"logs/recommender_{datetime.now().strftime('%Y%m%d')}.log", 'r', encoding='utf-8') as f:
                                logs = f.readlines()[-10:]
                                st.code(''.join(logs))
                        except FileNotFoundError:
                            st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå log")
        else:
            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡πà‡∏≠‡∏ô")

    # Footer
    st.markdown("---")
    st.markdown("""
    ### üíù ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    
    ‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏∞‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì:
    1. ‡πÉ‡∏´‡πâ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    2. ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    3. ‡∏ö‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    
    üí° **Tip:** ‡∏•‡∏≠‡∏á‡∏ö‡∏≠‡∏Å‡πÄ‡∏£‡∏≤‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£ ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏°‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô
    """)

if __name__ == "__main__":
    main()
